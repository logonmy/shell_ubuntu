ar和nm命令的使用

当我们的程式中有经常使用的模块，而且这种模块在其他程式中也会用到，这时按照软件重用的思想，我们应该将他们生成库，使得以后编程能够减少研发代码量。这里介绍两个命令ar和nm，用来对库操作。 

By Wing, 出处：only_you

当我们的程式中有经常使用的模块，而且这种模块在其他程式中也会用到，这时按照软件重用的思想，我们应该将他们生成库，使得以后编程能够减少研发代码量。这里介绍两个命令ar和nm，用来对库操作。 

1、ar基本用法 

ar命令能够用来创建、修改库，也能够从库中提出单个模块。库是一单独的文档，里面包含了按照特定的结构组织起来的其他的一些文档（称做此库文档的member）。原始文档的内容、模式、时间戳、属主、组等属性都保留在库文档中。 

下面是ar命令的格式： 
ar[-][abcfilNoPsSuvV][membername][count]archivefiles... 

例 如我们能够用ar rvl ibtest.a hello.o hello1.o来生成一个库，库名字是test，链接时能够用-ltest链接。该库中存放了两个模块hello.o和hello1.o。选项前能够有 ‘-’字符，也能够没有。下面我们来看看命令的操作选项和任选项。现在我们把部分称为操作选项，而[abcfilNoPsSuvV]部分称为任选项。 

中的操作选项在命令中只能并且必须使用其中一个，他们的含义如下： 
d：从库中删除模块。按模块原来的文档名指定要删除的模块。假如使用了任选项v则列出被删除的每个模块。 

m：该操作是在一个库中移动成员。当库中假如有若干模块有相同的符号定义(如函数定义)，则成员的位置顺序很重要。假如没有指定任选项，任何指定的成员将移到库的最后。也能够使用’a’，’b’，或’I’任选项移动到指定的位置。 

p：显示库中指定的成员到标准输出。假如指定任选项v，则在输出成员的内容前，将显示成员的名字。假如没有指定成员的名字，任何库中的文档将显示出来。 

q：快速追加。增加新模块到库的结尾处。并不检查是否需要替换。’a’，’b’，或’I’任选项对此操作没有影响，模块总是追加的库的结尾处。假如使用了任选项v则列出每个模块。这时，库的符号表没有更新，能够用’ars’或ranlib来更新库的符号表索引。 

r：在库中插入模块(替换)。当插入的模块名已在库中存在，则替换同名的模块。假如若干模块中有一个模块在库中不存在，ar显示一个错误消息，并不替换其他同名模块。默认的情况下，新的成员增加在库的结尾处，能够使用其他任选项来改变增加的位置。 

t：显示库的模块表清单。一般只显示模块名。 

x：从库中提取一个成员。假如不指定要提取的模块，则提取库中任何的模块。 

下面在看看可和操作选项结合使用的任选项： 
a：在库的一个已存在的成员后面增加一个新的文档。假如使用任选项a，则应该为命令行中membername参数指定一个已存在的成员名。 

b：在库的一个已存在的成员前面增加一个新的文档。假如使用任选项b，则应该为命令行中membername参数指定一个已存在的成员名。 

c：创建一个库。不管库是否存在，都将创建。 

f：在库中截短指定的名字。缺省情况下，文档名的长度是不受限制的，能够使用此参数将文档名截短，以确保和其他系统的兼容。 

i：在库的一个已存在的成员前面增加一个新的文档。假如使用任选项i，则应该为命令行中membername参数指定一个已存在的成员名(类似任选项b)。 

l：暂未使用 

N：和count参数一起使用，在库中有多个相同的文档名时指定提取或输出的个数。 

o：当提取成员时，保留成员的原始数据。假如不指定该任选项，则提取出的模块的时间将标为提取出的时间。 

P：进行文档名匹配时使用全路径名。ar在创建库时不能使用全路径名（这样的库文档不符合POSIX标准），但是有些工具能够。 

s：写入一个目标文档索引到库中，或更新一个存在的目标文档索引。甚至对于没有任何变化的库也作该动作。对一个库做ars等同于对该库做ranlib。 

S：不创建目标文档索引，这在创建较大的库时能加快时间。 

u：一般说来，命令arr…插入任何列出的文档到库中，假如您只想插入列出文档中那些比库中同名文档新的文档，就能够使用该任选项。该任选项只用于r操作选项。 

v：该选项用来显示执行操作选项的附加信息。 

V：显示ar的版本。 

2、nm基本用法命令 

nm用来列出目标文档的符号清单。下面是nm命令的格式： 
nm[-a|--debug-syms][-g|--extern-only][-B] 
[-C|--demangle][-D|--dynamic][-s|--print-armap] 
[-o|--print-file-name][-n|--numeric-sort] 
[-p|--no-sort][-r|--reverse-sort][--size-sort] 
[-u|--undefined-only][-l|--line-numbers][--help] 
[--version][-tradix|--radix=radix] 
[-P|--portability][-fformat|--format=format] 
[--target=bfdname][objfile...] 

假如没有为nm命令指出目标文档，则nm假定目标文档是a.out。下面列出该命令的任选项，大部分支持“-”开头的短格式和“-“开头的长格式。 
-A、-o或--print-file-name：在找到的各个符号的名字前加上文档名，而不是在此文档的任何符号前只出现文档名一次。 

例如nmlibtest.a的输出如下： 

CPThread.o: 
00000068TMain__8CPThreadPv 
00000038TStart__8CPThread 
00000014T_._8CPThread 
00000000T__8CPThread 
00000000?__FRAME_BEGIN__ 
………………………………… 

则nm-A的输出如下： 

libtest.a:CPThread.o:00000068TMain__8CPThreadPv 
libtest.a:CPThread.o:00000038TStart__8CPThread 
libtest.a:CPThread.o:00000014T_._8CPThread 
libtest.a:CPThread.o:00000000T__8CPThread 
libtest.a:CPThread.o:00000000?__FRAME_BEGIN__

-a或--debug-syms：显示调试符号。 

-B：等同于--format=bsd，用来兼容MIPS的nm。 

-C或--demangle：将低级符号名解码(demangle)成用户级名字。这样能够使得C 函数名具备可读性。 

-D或--dynamic：显示动态符号。该任选项仅对于动态目标(例如特定类型的共享库)有意义。 

-fformat：使用format格式输出。format能够选取bsd、sysv或posix，该选项在GNU的nm中有用。默认为bsd。 

-g或--extern-only：仅显示外部符号。 

-n、-v或--numeric-sort：按符号对应地址的顺序排序，而非按符号名的字符顺序。 

-p或--no-sort：按目标文档中碰到的符号顺序显示，不排序。 

-P或--portability：使用POSIX.2标准输出格式代替默认的输出格式。等同于使用任选项-fposix。 

-s或--print-armap：当列出库中成员的符号时，包含索引。索引的内容包含：哪些模块包含哪些名字的映射。 

-r或--reverse-sort：反转排序的顺序(例如，升序变为降序)。 

--size-sort：按大小排列符号顺序。该大小是按照一个符号的值和他下一个符号的值进行计算的。 

-tradix或--radix=radix：使用radix进制显示符号值。radix只能为“d”表示十进制、“o”表示八进制或“x”表示十六进制。 

--target=bfdname：指定一个目标代码的格式，而非使用系统的默认格式。 

-u或--undefined-only：仅显示没有定义的符号(那些外部符号)。 

-l或--line-numbers：对每个符号，使用调试信息来试图找到文档名和行号。对于已定义的符号，查找符号地址的行号。对于未定义符号，查找指向符号重定位入口的行号。假如能够找到行号信息，显示在符号信息之后。 

-V或--version：显示nm的版本号。 

--help：显示nm的任选项。
ar cs libmy.a//创建一个库 
ar rs libmy.a 1.o//增加一个模块 
ar t libmy.a//显示库里的模块 
ar d libmy.a 1.o//删除一个模块


